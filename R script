# PCA Biplot Analysis
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("missMDA")
updateR()
updateR
updateR ()
updateR (fast = FALSE)
library(metan)
update(R)
update(r)
update()
options(device.ask.default = TRUE)
dev.new()
options(device.ask.default = TRUE)
dev.new()
setwd("C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Mechanical Harvest Paper/Phenotype manuscript/PCA")
#imported adjusted means as input date set
library(readxl)
HCA <- read_excel("mydata.xlsx")
head(HCA)
str(HCA)
if (!requireNamespace("circlize", quietly = TRUE)) {
  install.packages("circlize")
}
library(circlize)
library(dendextend)
# Convert all columns except 'Treatment' to numeric
HCA[, -1] <- lapply(HCA[, -1], as.numeric)
# Compute distance matrix and hierarchical clustering
dd <- dist(scale(HCA[, -1]), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
dend <- as.dendrogram(hc)
# Define the number of clusters
num_clades <- 4
# Color branches and labels based on clusters
dend <- dend %>%
  color_branches(k = num_clades, col = c("firebrick4", "forestgreen", "black", "blue")) %>%
  color_labels(k = num_clades, col = c("firebrick4", "forestgreen", "black", "blue")) %>%
  set("branches_lwd", 2)
# Update dendrogram labels with original genotype names
labels(dend) <- HCA$Treatment
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
View(HCA)
#import data set, adjusted means
data <- read.csv("mydata.csv")
head(data)
str(data)
# Compute distance matrix and hierarchical clustering
dd <- dist(scale(data[, -1]), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
str(data)
View(data)
setwd("C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Mechanical Harvest Paper/Phenotype manuscript/PCA")
#import data set, adjusted means
data <- read.csv("mydata.csv")
# hierarchical cluster analyses
str(data)
library(circlize)
library(dendextend)
library(dplyr)
# Compute distance matrix and hierarchical clustering
dd <- dist(scale(data[, -1]), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
sum(is.na(data))
sum(is.infinite(data))
sum(is.nan(data))
apply(data[, -1], 2, sd)
sum(is.na(data))
apply(data[, -1], 2, sd)
print(data)
options(max.print = 99999)
print(data)
# hierarchical cluster analyses
str(data)
setwd("C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Mechanical Harvest Paper/Phenotype manuscript/PCA")
#import data set, adjusted means
data <- read.csv("mydata.csv")
library(circlize)
library(dendextend)
library(dplyr)
# Compute distance matrix and hierarchical clustering
dd <- dist(scale(data[, -1]), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
dend <- as.dendrogram(hc)
# Define the number of clusters
num_clades <- 4
# Color branches and labels based on clusters
dend <- dend %>%
  color_branches(k = num_clades, col = c("firebrick4", "forestgreen", "black", "blue")) %>%
  color_labels(k = num_clades, col = c("firebrick4", "forestgreen", "black", "blue")) %>%
  set("branches_lwd", 2)
# Update dendrogram labels with original genotype names
labels(dend) <- PCA_data$Treatment
# Update dendrogram labels with original genotype names
labels(dend) <- data$Treatment
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
library(FactoMineR)
library(factoextra)
library(missMDA)
setwd("C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Mechanical Harvest Paper/Phenotype manuscript/PCA")
#import data set, adjusted means
data <- read.csv("mydata.csv")
head(data)
str(data)
summary(data)
options(max.print = 99999)
print(data)
#A subset of the data (Across_data_PCA) is created, excluding the first column
Across_data_PCA <- data[, -1, drop = FALSE]
head(Across_data_PCA)
str(Across_data_PCA)
# Perform PCA
res.pca <- PCA(Across_data_PCA, scale.unit = TRUE)
summary(res.pca)
# check structure
str(res.pca)
# Extract eigenvalues
eigenvalues <- res.pca$eig
write.csv(eigenvalues, file = "eigenvalues.csv", row.names = FALSE)
# Extract contributions of traits to the variance of PC1 to PC5
contributions <- res.pca$var$contrib[, 1:5]
# Print the contributions
print(contributions)
write.csv(contributions, file = "contributions.csv", row.names = FALSE)
# Extract loadings
loadings <- res.pca$var$coord
# Extract correlation coefficients (R^2) for each principal component separately
R2_values <- res.pca$var$cor^2
write.csv(R2_values, file = "R2_values.csv", row.names = FALSE)
# Extract eigen vectors
eigen_vectors <- res.pca$svd$V
write.csv(eigen_vectors, file = "eigen_vectors.csv", row.names = FALSE)
#Scree plot
fviz_eig(res.pca)
ggsave("scree_plot.png", width = 8, height = 6, dpi = 600, bg = "white")
#Biplot cos
fviz_pca_var(res.pca,
             col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE)
ggsave("biplot_cos.png", width = 8, height = 6, dpi = 600, bg = "white")
# Load necessary libraries
library(ggplot2)
# Extract the eigenvalue information from res.pca
eig <- res.pca$eig
# Create a data frame for plotting
variance_df <- data.frame(
  Component = 1:nrow(eig),
  Variance = eig[, 2],  # Percentage of variance explained
  CumulativeVariance = eig[, 3]  # Cumulative percentage of variance
)
# Plot the cumulative variance explained
variance_plot <- ggplot(variance_df, aes(x = Component)) +
  geom_line(aes(y = Variance, color = "Individual"), size = 1) +
  geom_point(aes(y = Variance, color = "Individual"), size = 2) +
  geom_line(aes(y = CumulativeVariance, color = "Cumulative"), size = 1) +
  geom_point(aes(y = CumulativeVariance, color = "Cumulative"), size = 2) +
  labs(
    title = "Variance Explained by Principal Components",
    x = "Principal Component",
    y = "Percentage of Variance Explained",
    color = "Legend"
  ) +
  scale_color_manual(values = c("Individual" = "green", "Cumulative" = "red")) +
  scale_y_continuous(
    breaks = seq(0, 100, by = 5),
    minor_breaks = seq(0, 100, by = 1)  # Adding minor ticks every 1%
  ) +
  scale_x_continuous(
    breaks = 1:nrow(eig),
    minor_breaks = 1:nrow(eig)  # Adding minor ticks for each component
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 1),  # No rotation for x-axis labels
    panel.grid.major = element_blank(),     # Remove major grid lines
    panel.grid.minor = element_blank(),     # Remove minor grid lines
    axis.line = element_line(size = 1, colour = "black"),  # Add continuous lines for x and y axes
    axis.ticks.length = unit(0.15, "cm"),   # Length of the minor ticks
    axis.ticks = element_line(color = "black")  # Color of the minor ticks
  )
# Plot the cumulative variance explained
variance_plot <- ggplot(variance_df, aes(x = Component)) +
  geom_line(aes(y = Variance, color = "Individual"), size = 1) +
  geom_point(aes(y = Variance, color = "Individual"), size = 2) +
  geom_line(aes(y = CumulativeVariance, color = "Cumulative"), size = 1) +
  geom_point(aes(y = CumulativeVariance, color = "Cumulative"), size = 2) +
  labs(
    title = "Variance Explained by Principal Components",
    x = "Principal Component",
    y = "Percentage of Variance Explained",
    color = "Legend"
  ) +
  scale_color_manual(values = c("Individual" = "green", "Cumulative" = "red")) +
  scale_y_continuous(
    breaks = seq(0, 100, by = 5),
    minor_breaks = seq(0, 100, by = 1)  # Adding minor ticks every 1%
  ) +
  scale_x_continuous(
    breaks = 1:nrow(eig),
    minor_breaks = 1:nrow(eig)  # Adding minor ticks for each component
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 1),  # No rotation for x-axis labels
    panel.grid.major = element_blank(),     # Remove major grid lines
    panel.grid.minor = element_blank(),     # Remove minor grid lines
    axis.line = element_line(size = 1, colour = "black"),  # Add continuous lines for x and y axes
    axis.ticks.length = unit(0.15, "cm"),   # Length of the minor ticks
    axis.ticks = element_line(color = "black")  # Color of the minor ticks
  )
ggsave("scree_plot.png", plot = variance_plot, width = 10, height = 6, dpi = 600, bg = "white")
# Create Biplot Genotype by Descriptor
fviz_pca_biplot(res.pca,
                geom.ind = "point",
                col.ind = "blue",
                pointshape = 19, pointsize = 2,
                palette = c("red", "deepskyblue", "darkorange", "darkorchid"),
                addEllipses = FALSE,
                alpha.var = "contrib",
                col.var = "contrib",
                gradient.cols = c("black", "forestgreen", "firebrick"),
                repel = TRUE, # Add repel function
                legend.title = list(fill = "Genotype"),
                title = "Genotype by Trait Biplot")
ggsave("biplot_GxT.png", width = 8, height = 6, dpi = 600, bg = "white")
# Plot the qgraph
corMat1 <-  cor(Across_data_PCA, method = "spearman", use="pairwise")
groups <- list(Plant_architecture = c(1,2,3,4,5),
               Fruit_destemming = c(6,7,8,9),
               Fruit_morphology = c(10,11,12,13,14,15,16),
               Yeild_parameters = c(17,18,19,20))
# Plot the qgraph with groups
library(qgraph)
qgraph(corMat1, graph = "cor", groups=groups, minimum=0.2,
       borders = TRUE,
       shape="ellipse",vsize=6,vsize2=4,#vTrans=90,
       edge.labels=TRUE,edge.label.cex=0.66,#label.font=18,
       label.cex=1.6,
       edge.label.bg=FALSE,edge.label.color="black", edge.label.position=0.65,legend.cex = 0.5,esize=7,
       posCol="DarkGreen", negCol="coral3",label.scale=TRUE,
       palette="rainbow")
# Correlation
# install.packages("metan")
library (metan)
corrl <- corr_coef(Across_data_PCA)
plot(corrl)
#correlation table
correlation_table0 <- cor(Across_data_PCA)
write.csv(correlation_table0, file = "correlation_table0.csv", row.names = FALSE)
str(Across_data_PCA)
head(Across_data_PCA)
# Check for constant variables
constant_vars <- names(Across_data_PCA)[apply(Across_data_PCA, 2, function(x) length(unique(x))) == 1]
print(constant_vars)
# Calculate correlation matrix, ignoring NAs
correlation_matrix <- cor(Across_data_PCA, use = "pairwise.complete.obs")
# Initialize an empty matrix for storing correlation coefficients with significance levels
correlation_table <- matrix("", nrow = ncol(correlation_matrix), ncol = ncol(correlation_matrix))
# Loop through each pair of variables
for(i in 1:ncol(correlation_matrix)) {
  for(j in 1:ncol(correlation_matrix)) {
    # Skip diagonal elements
    if(i == j) next
    # Perform correlation test
    correlation_test <- cor.test(Across_data_PCA[[i]], Across_data_PCA[[j]], use = "pairwise.complete.obs")
    # Get correlation coefficient
    r <- correlation_matrix[i, j]
    # Get p-value
    p <- correlation_test$p.value
    # Add significance level
    if(p < 0.001) {
      correlation_table[i, j] <- paste0(format(r, digits = 2), "***")
    } else if(p < 0.01) {
      correlation_table[i, j] <- paste0(format(r, digits = 2), "**")
    } else if(p < 0.05) {
      correlation_table[i, j] <- paste0(format(r, digits = 2), "*")
    } else {
      correlation_table[i, j] <- format(r, digits = 2)
    }
  }
}
# Convert to data frame for better display
correlation_table <- as.data.frame(correlation_table)
# Print the correlation table
print(correlation_table)
# Write the correlation table to a CSV file
write.csv(correlation_table, file = "correlation_table.csv", row.names = FALSE)
# hierarchical cluster analyses
str(data)
library(circlize)
library(dendextend)
library(dplyr)
# Compute distance matrix and hierarchical clustering
dd <- dist(scale(data[, -1]), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
dend <- as.dendrogram(hc)
# Define the number of clusters
num_clades <- 4
# Color branches and labels based on clusters
dend <- dend %>%
  color_branches(k = num_clades, col = c("firebrick4", "forestgreen", "black", "blue")) %>%
  color_labels(k = num_clades, col = c("firebrick4", "forestgreen", "black", "blue")) %>%
  set("branches_lwd", 2)
# Update dendrogram labels with original genotype names
labels(dend) <- data$Treatment
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
# Cut the tree to get cluster assignments
clusters <- cutree(hc, k = num_clades)
# Add cluster assignments to the original data
data$Cluster <- clusters
colnames(data)
summary(data$Cluster)
unique(data$Cluster)
cluster_means <- data %>%
  group_by(Cluster) %>%
  summarise(across(c("PHT", "PWDT", "HTFPB", "DTFN", "NBB", "DSRG", "DSRR",
                     "DSFG", "DSFR", "PER", "ARA", "WMH", "MAXW", "HMW",
                     "MAXH", "CURH", "TLY", "RED", "GRN", "PODWT"), mean, na.rm = TRUE))
# Print the mean values for each cluster
print(cluster_means)
View(data)
write.csv(HCA, file = "HCA.csv", row.names = FALSE)
write.csv(cluster_means, file = "cluster_means.csv", row.names = FALSE)
write.csv(data, file = "data.csv", row.names = FALSE)
write.csv(data, file = "data.clusters.csv", row.names = FALSE)
head(data)
# check structure
str(res.pca)
plot(corrl)
corrl <- corr_coef(Across_data_PCA)
# Correlation
# install.packages("metan")
library (metan)
corrl <- corr_coef(Across_data_PCA)
plot(corrl)
# Print the correlation table
print(correlation_table)
head(Across_data_PCA)
str(Across_data_PCA)
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
library(circlize)
library(dendextend)
library(dplyr)
# Plot circular dendrogram
circlize_dendrogram(dend, dend_track_height = 0.7)
